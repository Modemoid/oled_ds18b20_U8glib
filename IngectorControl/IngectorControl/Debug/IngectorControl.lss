
IngectorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f7  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a6  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f3  00000000  00000000  000002ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000173  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006b  00000000  00000000  000005d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	22 c0       	rjmp	.+68     	; 0x4e <__vector_4>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	22 c0       	rjmp	.+68     	; 0x62 <__vector_14>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ea       	ldi	r30, 0xA6	; 166
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	21 d0       	rcall	.+66     	; 0x8c <main>
  4a:	2b c0       	rjmp	.+86     	; 0xa2 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <__vector_4>:
#include <avr/io.h>
#include <avr/interrupt.h>


ISR (TIMER2_OVF_vect)
{
  4e:	1f 92       	push	r1
  50:	0f 92       	push	r0
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	0f 92       	push	r0
  56:	11 24       	eor	r1, r1
	
}
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

00000062 <__vector_14>:
ISR (ADC_vect)
{
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	8f 93       	push	r24
	if (ADMUX == 0b00100000)
  6e:	87 b1       	in	r24, 0x07	; 7
  70:	80 32       	cpi	r24, 0x20	; 32
  72:	19 f4       	brne	.+6      	; 0x7a <__vector_14+0x18>
	{
		//TODO: GET ADC DATA
		ADMUX = 0b00100001;    //(aref, only adch byte used, ch1 used)
  74:	81 e2       	ldi	r24, 0x21	; 33
  76:	87 b9       	out	0x07, r24	; 7
  78:	02 c0       	rjmp	.+4      	; 0x7e <__vector_14+0x1c>
	}
	else
	{
		//TODO: GET ADC DATA
		ADMUX = 0b00100000;   //(aref, only adch byte used, ch0 used)
  7a:	80 e2       	ldi	r24, 0x20	; 32
  7c:	87 b9       	out	0x07, r24	; 7
	//ADMUX = 0x00100001;    //(aref, only adch byte used, ch1 used)

	//value = value + (ADC*11/4); // Суммируем старое и новое значения АЦП, преобразуем
	//adc_counter++; // Увеличиваем счетчик измерений
	//перезапускаем АДЦ
	ADCSRA |=(1<<ADSC); //silgle ADC convert start,
  7e:	36 9a       	sbi	0x06, 6	; 6
}
  80:	8f 91       	pop	r24
  82:	0f 90       	pop	r0
  84:	0f be       	out	0x3f, r0	; 63
  86:	0f 90       	pop	r0
  88:	1f 90       	pop	r1
  8a:	18 95       	reti

0000008c <main>:
	//DDRB = 0xff //all B is out
	//DDRB = 0x00 //all B is in
	//PORTD |= _BV(PD3);      // установить "1" на линии 3 порта D
	//PORTD &= ~_BV(PD4);      // установить "0" на линии 4 порта D
	
	Ing0DDR  = _BV(Ing0PinNum);//ingector //out
  8c:	88 e0       	ldi	r24, 0x08	; 8
  8e:	87 bb       	out	0x17, r24	; 23
	Ing0DDR  = _BV(Ing1PinNum);// arduino led //out 
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	87 bb       	out	0x17, r24	; 23
	
	IgiDDR = ~_BV(IgiPinNum); //igition sensor //in
  94:	8b ef       	ldi	r24, 0xFB	; 251
  96:	81 bb       	out	0x11, r24	; 17
	PotDrocelDDR = ~_BV(PotDrocelPinNum); //Drocel pot attached //in
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	84 bb       	out	0x14, r24	; 20
	Pot0DDR = ~_BV(Pot0PinNum); //Drocel pot attached //in
  9c:	8d ef       	ldi	r24, 0xFD	; 253
  9e:	84 bb       	out	0x14, r24	; 20
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x14>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
